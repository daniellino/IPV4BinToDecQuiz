{"version":3,"sources":["main.js"],"names":["window","binar","resetWholeGeneration","location","reload","final","result","clickedObjectContainer","myChosenAnswers","i","givenAns","document","getElementById","push","round","random","length","innerHTML","binaryVlaue","decimVal","Math","pow","style","display","testForHidingRow","tablRowCount","querySelector","rows","Indx","console","populatGivenAns","myArray","j","randNum","floor","log","shuffleArray","newArray","t","timerNum","clearInterval","runToCheck","resultAns","backgroundColor","color","concat","myFunctionFalse","undefined","body","q","cmbAnsFieldContent","indexStr","myFunctionCorrect"],"mappings":"aAQA,IARA,IACEA,OAGEC,uBAJEC,qBAAuB,WAC3BF,OAAOG,SAASC,UADlBH,MAAA,GAKII,OAAQ,GAFRC,SAAJ,EAEID,gBAAJ,GAEIE,SAAAA,SAAAA,eAAJ,WACIC,EAAAA,EAAAA,EAAe,EAAGC,IAEtBH,OAAII,KAAWC,MAAAA,KAASC,OAAAA,EAAAA,IAItBX,MAAMY,KAAKP,QAHbD,OAAUA,OAAMI,OAAOA,QAErBH,IAAAA,YAAcQ,SAAWC,eAAzB,gBAEAV,YAAQA,UAAAA,OAMV,IAAK,IAAII,GAAI,EAAGA,GAAIR,MAAMe,OAAQP,KAFtBQ,GAAZC,MAAYD,IAKRE,UAAsBC,KAAKC,IAAI,EAAG,EAAIZ,IAFxCU,UAAA,EA2CF,IAvCIA,IAAAA,aAAA,WAEHZ,uBAAAe,MAAAC,QAAA,QAGCC,iBAAA,WAQA,IAFA,IAJCC,EAAAd,SAAAe,cAAA,iBAAAC,KAAAX,OAMQY,EAAO,EAAGA,EAAOH,EAAe,EAAGG,IADhCH,QAFZd,SAAAe,cACID,8BAAwBC,EAAc,uBAC1CG,MAAYJ,SAGCC,QAGTf,SAASe,cALR,8BAAiCE,EAAMA,uBAExCjB,MAAAA,UAUAA,SAAAe,cAFE,8BAAgCE,EAAO,KAG3CN,MAAAC,QAAA,SAGEO,gBAAkB,WACC,IAAnBtB,kBACFA,gBAAkBD,uBAAuBmB,cAAc,OAAOT,WAEhEP,SAASO,UAAYT,iBAGjBuB,QAAU,CAACZ,UAGRa,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAA5B,IAAKC,QAAWD,KAAhBE,MAA4B,IAA5Bd,KAA4BL,UAE1Bc,QAAQM,KAAIF,SA6Dd,IAzDA,IAAMG,aAAe,SAACL,GAAtB,IAAMK,IAAAA,EAAAA,EAAepB,OAAfoB,EAAAA,EAAAA,EAAgBL,IAAAA,CACpB,IAAKC,EAAKZ,KAAGW,MAAQf,KAAAA,UAArBP,EAAyC,IACnCuB,EAAIZ,EAAWA,GACnBW,EAAQtB,GAAGsB,EAAXC,GACAD,EAAQtB,GAAKsB,EAEd,OAAAA,GACDM,SAAON,aAAPA,SAIEO,EAAI,EAFJD,SAAWD,YAAY,WAGvBG,EAAAA,IACFD,IACA3B,SAAAC,eAAY,eAAAK,UAAAqB,IAEV3B,cAASC,UAFXD,SAGOC,eAAA,eAAAK,UAAA,cACLuB,SAAAA,cAAA,iBAAAlB,MAAAC,QAAA,OACAZ,SAASC,eAAe,UAAAU,MAAeL,QAAvC,UAEAN,KAED8B,WAXH,WAYA9B,SAAAC,eAAA,eAAAK,UAAAqB,EAGEE,cAAcD,UAFhB,IAAME,EAAa9B,SAAb8B,eAAmB,cAKrBC,EAAsB,WAOtBA,EAAUzB,UAAY,SALtBP,SAASY,KAATA,MAAAqB,gBAAA,UAPqBD,EAQpBpB,MAAAsB,MAAA,UAQClC,SAASO,UAPb,IAAAT,gBAOI,sBAAAqC,OAA2C1B,SAA3C,qCANE2B,sBAAAA,OAAkB3B,SAAlB2B,gBAAAA,OAAwBtC,gBAAxBsC,MAGJnC,EAAoBgC,SAAAA,UASQI,MAA1BxC,wBARFmC,GAAwBvB,UAZ1BqB,EAAAA,UAFuB,WAMrB7B,SAASqC,KAAK1B,MAAMqB,gBAAkB,UAHxCjC,SAAIgC,MAAY/B,MAASC,WAgBtBkC,KAaIG,EAAI,EAAGA,EAAIZ,SAASrB,OAAQiC,IAAK,CAXxC,IAAIC,SAAAA,OAAkBD,EAAGvC,GACzByC,SAAI5C,YAAAA,SAEA6C,SAAAA,eAAiBD,UAAAlC,UAAAoB,SAAAY","file":"main.min.js","sourcesContent":["const resetWholeGeneration = () => {\r\n  window.location.reload();\r\n};\r\nlet result;\r\nlet binar = [];\r\nlet final = \"\";\r\nlet decimVal = 0;\r\nlet clickedObjectContainer;\r\nlet myChosenAnswers = \"\"; //variable for keeping concatenated words\r\n\r\nlet givenAns = document.getElementById(\"combAns\");\r\nfor (let i = 0; i < 8; i++) {\r\n  //Generating random binary number\r\n  result = Math.round(Math.random(1, 2));\r\n  binar.push(result);\r\n  final = final.concat(result);\r\n}\r\nlet binaryVlaue = document.getElementById(\"binary-Value\");\r\n\r\nbinaryVlaue.innerHTML = final; //displaying the random binary number on the page\r\n\r\nfor (let i = 0; i < binar.length; i++) {\r\n  //convert random generated binary to equivalent decial value\r\n  if (binar[i] == 1) {\r\n    decimVal = decimVal + Math.pow(2, 7 - i);\r\n  } else {\r\n    decimVal += 0;\r\n  }\r\n}\r\n\r\nconst makeItHidden = () => {\r\n  //function for hidding the clicked cell table row\r\n  clickedObjectContainer.style.display = \"none\";\r\n}; //hiding\r\n\r\nconst testForHidingRow = () => {\r\n  //hiding the whole row in which all cells were clicked\r\n  let tablRowCount = document.querySelector(\".answersTable\").rows.length;\r\n  console.log(tablRowCount);\r\n  for (var Indx = 1; Indx < tablRowCount + 1; Indx++) {\r\n    if (\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \") td:nth-child(2)>a\"\r\n      ).style.display == \"none\" &&\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \") td:nth-child(3)>a\"\r\n      ).style.display == \"none\"\r\n    ) {\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \")\"\r\n      ).style.display = \"none\";\r\n    } //end of if\r\n  } //end of loop\r\n}; //end of function hiding rows\r\n\r\nconst populatGivenAns = () => {\r\n  if (myChosenAnswers == \"\") {\r\n    myChosenAnswers = clickedObjectContainer.querySelector(\"div\").innerHTML;\r\n  }\r\n  givenAns.innerHTML = myChosenAnswers;\r\n};\r\n\r\nconst myArray = [decimVal]; //*********defining array of answers\r\n\r\n//adding other false random answers to myArray\r\nfor (let j = 0; j < 5; j++) {\r\n  let randNum = Math.floor(Math.random() * 256);\r\n  console.log(randNum);\r\n  myArray.push(randNum);\r\n}\r\n\r\nconst shuffleArray = (myArray) => {\r\n  for (var i = myArray.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = myArray[i];\r\n    myArray[i] = myArray[j];\r\n    myArray[j] = temp;\r\n  }\r\n  return myArray;\r\n};\r\nvar newArray = shuffleArray(myArray);\r\n\r\nlet t = 0;\r\nlet timerNum = setInterval(() => {\r\n  //function for counting up to 30 seconds\r\n  if (t < 30) {\r\n    t++;\r\n    document.getElementById(\"timer-value\").innerHTML = t;\r\n  } else {\r\n    clearInterval(timerNum);\r\n    document.getElementById(\"timer-value\").innerHTML = \"Time is up!\";\r\n    document.querySelector(\".timer-wraper\").style.display = \"none\";\r\n    document.getElementById(\"timeUp\").style.display = \"block\";\r\n  }\r\n}, 1000);\r\n/*******************timer*********************** */\r\nconst runToCheck = () => {\r\n  document.getElementById(\"timer-value\").innerHTML = t;\r\n  clearInterval(timerNum); //capturing the latest elapsed time\r\n  let resultAns = document.getElementById(\"matchField\");\r\n  const myFunctionCorrect = () => {\r\n    resultAns.innerHTML = \"Correct!\";\r\n    document.body.style.backgroundColor = \"#96E29A\"; //color feedback correct\r\n    givenAns.style.color = \"#22E02D\";\r\n  }; //end of function myFunctionCorrect\r\n  //~~~~~~~~~~~~~~~~function definition for False\r\n  const myFunctionFalse = () => {\r\n    //injecting a class for changing the color of the FALSE text to red\r\n    resultAns.innerHTML = \"False!\";\r\n    document.body.style.backgroundColor = \"#FF5760\"; //color feedback correct\r\n    resultAns.style.color = \"#FF0000\";\r\n    if (myChosenAnswers == \"\") {\r\n      givenAns.innerHTML = `Correct answer is: ${decimVal}, and you didn't choose an option`;\r\n    } else {\r\n      givenAns.innerHTML = `Correct answer is: ${decimVal}, You Chose ${myChosenAnswers}!`;\r\n    }\r\n  }; //end of function myFunctionFalse\r\n  let cmbAnsFieldContent = givenAns.innerText;\r\n  if (clickedObjectContainer != undefined) {\r\n    if (cmbAnsFieldContent == decimVal) {\r\n      myFunctionCorrect();\r\n    } else {\r\n      myFunctionFalse();\r\n    }\r\n  } else {\r\n    myFunctionFalse();\r\n  }\r\n}; //end of function runToCheck\r\nfor (let q = 0; q < newArray.length; q++) {\r\n  var indexStr = String(q + 1);\r\n  // console.log(newArray.length);\r\n  indexStr = \"print_arr\" + indexStr;\r\n  // console.log(indexStr);\r\n  document.getElementById(indexStr).innerHTML = newArray[q];\r\n}\r\n"]}